class TileFilesDict(dict):
    def add(self,file_type : str,path :str): ...
    def check(self): ...

class TileDict(dict):
    """
        Class that represents the relationship between
        pre and post disaster Files.
    """
    def __init__(self,tile_id): ...
    def add(self,time_prefix,file_type,path): ...
    def get_id(self): ...
    def check(self): ...    

class ZoneDict(dict):
    def __init__(self, id): ...
    def add(self, tile_id, time_prefix, file_type, file_path): ...
    def get_id(self): ...
    def check(self): ...
    
class DisasterDict(dict):

    def add(self,folder_path,file_name): ...
    def _split_file_name(self,file_name): ...
    def check(self):
        """ Checks that every tile from each disaster have 6 files. 
        One image, one label and one target for pre and for post disaster"""
        ...
    def to_dict(self) -> dict:
        """
            Iterates throw the DisasterDict and returns a dict object with 
            only all paths of files related to each disaster zone.
        """
        ...
    def to_split_dict(self)->dict:
        ...
    
class RawPathManager:
    """This class is an interface for path management."""
    @classmethod
    def load_paths(cls,data_path: str) -> DisasterDict:
        """
            Creates a DisasterDict that stores each file path form the xBD raw folder.
        """
        ...